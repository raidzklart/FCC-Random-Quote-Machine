{"version":3,"sources":["QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newQuote","quote","state","quotes","Math","floor","random","forceUpdate","bind","assertThisInitialized","author","react_default","a","createElement","id","className","onClick","href","concat","Component","App","QuoteMachine_QuoteMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAIqBA,cAEjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAyBVQ,SAAW,WACPP,EAAKQ,MAAQR,EAAKS,MAAMC,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,WAC/Cb,EAAKc,eA1BLd,EAAKO,SAAWP,EAAKO,SAASQ,KAAdd,OAAAe,EAAA,EAAAf,CAAAD,IAChBA,EAAKS,MAAQ,CACTC,OAAQ,CAAC,CACLF,MAAO,mFACPS,OAAQ,gBAEZ,CACIT,MAAO,0FACPS,OAAQ,iBAEZ,CACIT,MAAO,mFACPS,OAAQ,gBAEZ,CACIT,MAAO,mKACPS,OAAQ,uBAlBDjB,oFAwBfG,KAAKK,MAAQL,KAAKM,MAAMC,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,4CAQ/C,OAAQK,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACZH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,SAAP,0BACAH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QAAQlB,KAAKK,MAAMA,OACzBU,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UAAUlB,KAAKK,MAAMS,QAC3BC,EAAAC,EAAAC,cAAA,WAASE,UAAU,WACfJ,EAAAC,EAAAC,cAAA,UAAQG,QAASpB,KAAKI,SAAUe,UAAU,MAAMD,GAAG,aAAnD,aACAH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,MAAME,KAAI,6CAAAC,OAA+CtB,KAAKK,MAAMA,MAA1D,OAAAiB,OAAqEtB,KAAKK,MAAMS,QAAUI,GAAG,eAApH,yBAzCsBK,aCI3BC,MAJf,WACE,OAAQT,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACQ,EAAD,QCOKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b9b8d80c.chunk.js","sourcesContent":["import React, {\n    Component\n} from 'react'\n\nexport default class QuoteMachine extends Component {\n\n    constructor(props) {\n        super(props);\n        this.newQuote = this.newQuote.bind(this);\n        this.state = {\n            quotes: [{\n                quote: \"I couldn't be more chuffed if I were a badger at the start of the mating season.\",\n                author: \"Ian Holloway\"\n            },\n            {\n                quote: \"Please don't call me arrogant, but I'm European champion and I think I'm a special one.\",\n                author: \"Jose Mourinho\"\n            },\n            {\n                quote: \"I wouldn't say I was the best manager in the business. But I was in the top one.\",\n                author: \"Brian Clough\"\n            },\n            {\n                quote: \"My greatest challenge is not what's happening at the moment, my greatest challenge was knocking Liverpool right off their f*****g perch. And you can print that.\",\n                author: \"Sir Alex Ferguson\"\n            },]\n        }\n    }\n\n    componentWillMount() {\n        this.quote = this.state.quotes[Math.floor(Math.random() * 4)];\n    }\n    newQuote = () => {\n        this.quote = this.state.quotes[Math.floor(Math.random() * 4)];\n        this.forceUpdate();\n    }\n\n    render() {\n        return (<div id=\"quote-box\">\n            <h1 id=\"title\">Random Football Quotes</h1>\n            <div>\n                <p id=\"text\">{this.quote.quote}</p>\n                <p id=\"author\">{this.quote.author}</p>\n                <section className=\"buttons\">\n                    <button onClick={this.newQuote} className=\"btn\" id=\"new-quote\">New Quote</button>\n                    <a className=\"btn\" href={`https://www.twitter.com/intent/tweet?text=${this.quote.quote}+-+${this.quote.author}`} id=\"tweet-quote\">Tweet Quote</a>\n                </section>\n            </div>\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport QuoteMachine from './QuoteMachine';\n\nfunction App() {\n  return (<div><QuoteMachine /></div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}